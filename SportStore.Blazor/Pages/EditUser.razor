@page "/edit-User/{Id:int}"
@using SportStore.Application.Requests
@inject IMediator Mediator
<PageTitle>Редактирование пользователя - Blazing User </PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Главная</a></li>
        <li class="breadcrumb-item active" aria-current="page">
            Редактирование пользователя
        </li>
    </ol>
</nav>

@if (_isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"> <p>Загрузка пользователя...</p></span>
        </div>
    </div>
   
}
else
{

    <h3 class="mt-5 mb-4">Редактирование пользователя: @_user.Name</h3>

    <Alert ErrorMessage= "@_errorMessage" SubmitSuccessful = "@_submitSuccessful"/>

    <UserForm User="_user" OnSubmit="SubmitEditUser" />
}


@code{

    private bool _isLoading;
    private bool _submitSuccessful;
    private string? _errorMessage;
    private User _user = new ();


    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        var response = await Mediator.Send(new GetUserRequest(Id));
        Console.WriteLine(response);
        if (response.user is not null)
        {
            _user.Id = Id;
            _user.Name = response.user.Name;
            _user.Surname = response.user.Surname;
            _user.Login = response.user.Login;
            _user.Image = response.user.Image;
            _user.Password = response.user.Password;
            _user.Patronymic = response.user.Patronymic;
            _user.Items.Clear();
            _user.Items.AddRange(response.user.Items.Select(ri => new Item
                   {
                       Number = ri.Number,
                       Title = ri.Title
                   }));
        }
        else
        {
            _errorMessage = "There was a problem loading the User.";
        }
        _isLoading = false;
    }

    private async Task SubmitEditUser(User user, IBrowserFile? image)
    {
        var response = await Mediator.Send(new EditUserRequest(user));
         if (!response.IsSuccess)
         {
             _submitSuccessful = false;
             _errorMessage = "There was a problem saving your User.";
         }
         else
         {
            _user.Id = Id;
            _user.Name = user.Name;
            _user.Surname = user.Surname;
            _user.Login = user.Login;
            _user.Image = user.Image;
            _user.Password = user.Password;
            _user.Patronymic = user.Patronymic;
            _user.Items.Clear();
            _user.Items.AddRange(user.Items.Select(ri => new Item
                {
                    Number = ri.Number,
                    Title = ri.Title
                }));

            _submitSuccessful = true;
            if (user.ImageAction == ImageAction.Add) _submitSuccessful = await ProcessImage(user.Id, image!);
            if (user.ImageAction == ImageAction.Remove) user.Image = "";
         }

        StateHasChanged();
    }



    private async Task<bool> ProcessImage(int userId, IBrowserFile userImage)
    {
        var imageUploadResponse = await Mediator.Send(new UploadUserImageRequest(userId, userImage));
        if (string.IsNullOrWhiteSpace(imageUploadResponse.ImageName))
        {
            _errorMessage = "Your User was saved, but there was a problem uploading the image.";
            return false;
        }
        _user.Image = imageUploadResponse.ImageName;
        return true;
    }

}


