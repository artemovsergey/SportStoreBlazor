@using SportStore.Application.Requests

<EditForm OnValidSubmit="SubmitForm" EditContext="_editContext">

    <ValidationSummary />
    <FluentValidationValidator />


    <FormSection Title="Basic Details" HelpText="This information is used to identify the User and can be searched to help hikers find it.">
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label for="userName" class="font-weight-bold text-secondary">Name</label>
                    <InputText @bind-Value="user.Name" class="form-control" id="userName" />
                    <ValidationMessage For="@(() => user.Name)" />


                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form-group">
                    <label for="userLogin" class="font-weight-bold text-secondary">Description</label>
                    <InputTextArea @bind-Value="user.Login" rows="6" class="form-control" id="userLogin" />
                    <ValidationMessage For="@(() => user.Login)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label for="password" class="font-weight-bold text-secondary">Location</label>
                    <InputText @bind-Value="user.Password" class="form-control" id="password" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
            </div>
        </div>
    </FormSection>
    <FormSection Title="Difficulty" HelpText="Help other hikers out by telling them the length of the User is how long it might take them.">

        <div class="row">
            <div class="col-3">
                <div class="form-group">
                    <label for="surname" class="font-weight-bold text-secondary">Length (km)</label>
                    <InputText @bind-Value="user.Surname" class="form-control" id="surname" />
                    <ValidationMessage For="@(() => user.Surname)" />
                </div>
            </div>
        </div>

    </FormSection>
    <FormSection Title="Items"
                 HelpText="Route instructions are a guide for the User.This helps hikers new to the User stay on track.">
        @{
            var i = 0;
        }
        @foreach (var item in user.Items)
        {
            i++;
            item.Number = i;
            <div class="row">
                <div class="col-2">
                    <div class="form-group">
                        <label class="font-weight-bold text-secondary">Number</label>
                        <p>@item.Number</p>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">

                        <label for="itemTitle" class="font-weight-bold text-secondary">Title</label>
                        <InputText @bind-Value="item.Title"
                                   class="form-control"
                                   id="itemTitle" />
                        <ValidationMessage For="@(() => item.Title)" />
                    </div>
                </div>
                <div class="col-1 d-flex mt-3">
                    <button @onclick="@(() => user.Items.Remove(item))"
                            class="btn btn-link" type="button">

                        <svg width="1em" height="1em" viewBox="0 0 16 16"
                             class="bi bi-x-circle-fill text-danger"
                             fill="currentColor"
                             xmlns="http://www.w3.org/2000/svg">

                            <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0
                             8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1
                             0-.708.708L7.293 8l-2.647 2.646a.5.5
                            0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0
                            .708-.708L8.707 8l2.647-2.646a.5.5 0 0
                            0-.708-.708L8 7.293 5.354 4.646z" />
                        </svg>
                    </button>
                </div>
            </div>
        }
        <div class="row">
            <div class="col">
                <button class="btn btn-outline-primary"
                        type="button"
                        @onclick="@(() => user.Items.Add(new Item()))">
                    Add Item

                </button>
                <ValidationMessage For="@(() => user.Items )" />
            </div>
        </div>
    </FormSection>

    <FormSection Title="Custom component"
                 HelpText="Custom component ImputTime">

        <label for="UserTime" class="font-weight-bold text-secondary"> Time</label>
        <InputTime @bind-Value="user.Id" />

        <ValidationMessage For="@(() => user.Id)" />

    </FormSection>

    <FormSection Title="Изображение"
                 HelpText="Компонент InputFile">

        <label for="userImage" class="font-weight-bold text-secondary">
            Image
        </label>
        
        
        @if (string.IsNullOrWhiteSpace(user.Image))
        {
            <InputFile OnChange="LoadUserImage" class="form-control-file" id="UserImage"
                       accept=".png,.jpg,.jpeg" />
        }
        else
        {
            <div class="card bg-dark text-white">
                <img src="https://localhost:7214/images/@user.Image" />
                <div class="card-img-overlay">
                    <button class="btn btn-primary btn-sm"
                            @onclick="RemoveUserImage">
                        Remove
                    </button>
                </div>
            </div>
        }
        

        <ValidationMessage For="@(() => user.Id)" />

    </FormSection>

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary"
                        type="button"
                        @onclick="@(() => user = new User())">
                    Reset
                </button>
                <button class="btn btn-primary"
                        type="submit">
                    Отправить
                </button>
            </div>
        </div>
    </div>


</EditForm>


@code {

    public User user = new();
    private bool _submitSuccessful;
    private string? _errorMessage;
    private EditContext _editContext = default!;
    private IBrowserFile? _userImage;

    [Parameter]
    public Func<User, IBrowserFile?, Task> OnSubmit { get; set; }

    [Parameter]
    public User? User { get; set; }

    public void ResetForm()
    {
        user = new User();
        _editContext = new EditContext(user);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
        _userImage = null;
    }

    protected override void OnInitialized()
    {
        // _editContext = new EditContext(user);
        // _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    protected override void OnParametersSet()
    {
        _editContext = new EditContext(user);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
        if (User != null)
        {
            user.Id = User.Id;
            user.Name = User.Name;
            user.Surname = User.Surname;
            user.Login = User.Login;
            user.Image = User.Image;
            user.Password = User.Password;
            user.Patronymic = User.Patronymic;
            user.Items.Clear();
            user.Items.AddRange(user.Items.Select(ri => new Item
                {
                    Number = ri.Number,
                    Title = ri.Title
                }));
        }
    }


    private async Task SubmitForm() => await OnSubmit(user, _userImage);

    private void LoadUserImage(InputFileChangeEventArgs e) {

        _userImage = e.File;
        user.ImageAction = ImageAction.Add;
        //StateHasChanged();
    }

    private void RemoveUserImage()
    {
        user.Image = null;
        user.ImageAction = ImageAction.Remove;
    }
}